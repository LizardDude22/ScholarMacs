;; Packages

;;; ebib

(use-package ebib
    :ensure t
    :config (setq ebib-preload-bib-files "PLACEHOLDER")
    :bind (global-set-key (kbd "C-c e") 'ebib))

;;; vertico

(use-package vertico
  :ensure t
  :pin gnu
  :init
  (vertico-mode))  ;; Enable Vertico at startup

;;; orderless

(use-package orderless
  :ensure t
  :pin gnu
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))  ;; Correct wrapping of the list

;;; marginalia

(use-package marginalia
  :ensure t
  :pin gnu
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  :init
  (marginalia-mode))
				

;; General Tweaks 

;;; Disable the startup message and set the window name

(setq inhibit-startup-message t)
(setq-default frame-title-format '("Emacs  |  File: %f"))

;;; Get rid of the menu, tool and scroll bars

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)


;;; Make background transparent—I left this off by default, however, with a nice background image this can look amazing on minimal desktop enviroments and window managers (e.g. Gnome or Sway)

;(set-frame-parameter nil 'alpha-background 70)

;(add-to-list 'default-frame-alist '(alpha-background . 70))

;;; Set up recent file and placeholder functionality

(recentf-mode 1)
(setq recentf-max-menu-items 10)  ; Set the maximum number of items to remember
(global-set-key (kbd "C-x ,") 'recentf-open-files)

(save-place-mode 1)

;;; Line spacing

(setq-default line-spacing 2)


;;; Make scrolling bearable

(setq pixel-scroll-precision-mode t)

;;; Make text nicer to read by adding margins

(setq-default left-margin-width 5 right-margin-width 5) ; Define new widths.
(global-visual-line-mode 1)

;;; Customize mode-line-format and centre it

(which-function-mode 1)


(setq-default mode-line-format ; This mode line displays simple Unicode characters depending on the mode. Icons for programming modes have been included since we all like to program now and then! This mode line is centered and displays the current heading (useful for org mode), mode and file
              '("%e"
                (:eval (let ((mode-line-string
                              (concat
			       " | "
                               "%b"
                               " | "
                               "%m"
                               (when (derived-mode-p 'org-mode) " 📔")
                               (when (derived-mode-p 'org-agenda-mode) " 🗓️")
                               (when (derived-mode-p 'bibtex-mode) " 📜")
                               (when (derived-mode-p 'lisp-mode) " 🛠️")
			       (when (derived-mode-p 'python-mode) " 🐍")
			       (when (derived-mode-p 'java-mode) " ☕")
			       (when (derived-mode-p 'perl-mode) " 🐫")
			       (when (derived-mode-p 'c-mode) " 👴🏼")
			       (when (derived-mode-p 'c++-mode) " 👴🏼")
			       " | "
                               (when which-function-mode
                                 (let ((function (which-function)))
                                   (if function
                                       (concat function )
				       )))
			       (when (not which-function-mode)
				     "which-function mode is disabled 👎🏻 | ")
			       )))

				 
                        (let* ((window-width (window-width))
                               (string-length (length mode-line-string))
                               (padding (max 0 (/ (- window-width string-length) 2))))
			       
                          (concat (make-string padding ?\s)
                                  mode-line-string
                                  (make-string (max 0 (- padding 1)) ?\s)))))
                "%e"))


;;; Custom startup


(defun center-text (text)
  "Center TEXT within the entire Emacs window width."
  (let* ((window-width (window-body-width))          ;; Get the width of the window
         (ascii-width (apply 'max (mapcar 'length (split-string text "\n")))))  ;; Max length of any line in the ASCII art
    (if (> window-width ascii-width)
        (let ((padding (max 0 (/ (- window-width ascii-width) 2))))  ;; Calculate padding
          (mapconcat (lambda (line)
                       (concat (make-string padding ?\ ) line))  ;; Add padding to each line
                     (split-string text "\n" t)
                     "\n"))
      text)))  ;; If the text is wider than the window, just return it unmodified

(defun my-ascii-art ()
  "Insert custom ASCII art into the *scratch* buffer."
  (interactive)
  (let ((ascii-art "
    _-`````-,            ,- '- .\n
  .'   .- - |          | - -.  `.\n
 /.'  /                     `.   \n
:/   :      _...   ..._      ``   :\n
::   :     /._ .`:'_.._\\.    ||   :\n
::    `._ ./  ,`  :    \\ . _.''   .\n
`:.      /   |  -.  \\-. \\\\_      /\n
  \:._ _/  .'   .@)  \\@) ` `\\ ,.'\n
     _/,--'       .- .\\,-.`--`.\n
       ,'/''     (( \\ `  )    
        /'/'  \\    `-'  (      
         '/''  `._,-----'\n
          ''/'    .,---'\n
           ''/'      ;:\n
             ''/''  ''/\n
               ''/''/''\n
                 '/'/'\n
                  `;"))
    (let ((welcome-message "\nWelcome to ScholarMacs! Press any key to clear this scratch buffer. Credit for the art goes to Vijay Kumar Bagavath Singh <3"))
      (with-current-buffer "*scratch*"
      (erase-buffer)
      (insert (center-text ascii-art))  ;; Centered ASCII art
       (insert (center-text welcome-message))  ;; Center the welcome message
      (goto-char (point-min))))))

(add-hook 'emacs-startup-hook 'my-ascii-art)

;; Automatically clear *scratch* buffer when you start typing
(defvar my-scratch-cleared nil "Flag to check if *scratch* has been cleared.")

(defun clear-scratch-buffer-on-input ()
  "Clear the *scratch* buffer when you start typing."
  (when (and (eq (current-buffer) (get-buffer "*scratch*"))
             (not my-scratch-cleared)
             (not (= (point) (point-min)))) ;; Only clear if you are not at the beginning (start typing)
    (erase-buffer)
    (setq my-scratch-cleared t)))  ;; Flag to prevent multiple clears

(add-hook 'post-command-hook 'clear-scratch-buffer-on-input)

;; Keep Emacs looking as usual (do not disable UI elements)
(setq initial-buffer-choice t)



;; Org mode

(require 'org)  ; Ensures org-mode is loaded
(require 'oc-csl)


;;; Org specific files
(setq org-agenda-files '("PLACEHOLDER")) ; Set your agenda file here


;;; Org bibliographic and exporter settings

(setq org-cite-global-bibliography '("PLACEHOLDER")) ; Set your .bib file here

(setq org-cite-csl-styles-dir "PLACEHOLDER") ; Set the CSL style directory here

(setq org-cite-csl-style "PLACEHOLDER") ; Set the specific CSL style file here

(setq TeX-command-default "LaTeX")
(setq TeX-clean-confirm nil)  ;; Automatically clean without confirmation
(setq TeX-clean-intermediate-files t)  ;; Automatically delete intermediate files


;;; Org editing and visual tweaks

(setq-default org-toggle-pretty-entities t
	       modus-themes-org-blocks 'gray-background
	       org-support-shift-select t
	       org-hide-emphasis-markers t
	       org-startup-with-inline-images t
               org-image-actual-width '(300))

;;;; Activate hl-line mode in Dired and Org Agenda only
(add-hook 'dired-mode-hook 'hl-line-mode)
(add-hook 'org-agenda-mode-hook 'hl-line-mode)
(setq modus-themes-hl-line '(intense accented))


(font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))) ;; Use only bullet point symbols for lists

;;; Spell checking

(defun my/org-setup-flyspell-and-dictionary ()
  "Enable flyspell and set dictionary to whatever you desire in org-mode."
  (flyspell-mode 1)
  (setq ispell-dictionary "PLACEHOLDER"))

(add-hook 'org-mode-hook 'my/org-setup-flyspell-and-dictionary)

;;; Ensure soft wrapping in org-mode

(add-hook 'org-mode-hook (lambda () 
                           (auto-fill-mode -1)  ;; Disable auto-fill
                           (setq fill-column most-positive-fixnum)  ;; Disable hard wrapping
                           (visual-line-mode 1)))  ;; Enable soft wrapping


;;; Useful macros

(defun insert-essay-plan-table ()
  "Inserts a 6x2 table for an essay plan with columns 'Idea' and 'Source', including the separator and rows."
  (interactive)
  (insert "| Idea | Source(s) (If applicable) |\n")  ;; Insert the header row
  (insert "|------+---------------------------|\n")  ;; Insert the separator row
  (dotimes (_ 4)  ;; Create 4 additional empty rows (for a total of 6 rows)
    (insert "|      |                        |\n"))
  (org-table-align))  ;; Align the table


(global-set-key (kbd "C-c o e") 'insert-essay-plan-table)


;; Modus tweaks and fonts

(setq modus-themes-fringes nil) ;; Make fringes transparent
(bind-key "<f5>" 'modus-themes-toggle) ;; Day and Night mode for Emacs :D \
(setq modus-themes-mode-line '(accented borderless 4 0.9))


;;; Fonts 
 
(set-face-attribute 'default nil :family "Iosevka" :height 120) ; Main typeface (for regular text)
(set-face-attribute 'variable-pitch nil :family "Open Sans" :height 120) ;Proportionately spaced typeface (for non-monospaced text)
(set-face-attribute 'fixed-pitch nil :family "Iosevka" :height 100) ; Monospaced typeface (for fixed-pitch text, like code blocks)
(set-face-attribute 'fixed-pitch-serif nil :family "Iosevka" :height 100)

(add-hook 'org-mode-hook #'variable-pitch-mode)
(setopt modus-themes-mixed-fonts t)


(setq modus-themes-headings
      '((1 . (height 1.4))
        (2 . (height 1.3))
	(3. (height 1.2))
	(4. (height 1.1))
        (t . (height 1))))         

;;; Load Modus

(load-theme 'modus-operandi t)

