#+TITLE: ScholarMacs
#+AUTHOR: thethoughtfulox
#+LANGUAGE: en 
#+PROPERTY: headger-args :tangle

* Introduction

Welcome to my Emacs config. This is literate config written in Org-mode using source code blocks tangled with a local config.el file which itself is called by .gnu-emacs-custom. To learn more about literate programming in Org-mode, or indeed literate programming in general, visit https://orgmode.org/manual/Working-with-Source-Code.html or read /Literate Programming/ by Donald Knuth.

** Packages

#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-packages

  ;;; ebib

  (use-package ebib
    :ensure t
    :config
    (setopt 
     ebib-preload-bib-files '("PLACEHOLDER")
     ebib-file-associations 
     '(("pdf" . "evince")
       ("xopp" . "xournalpp"))
     ebib-file-search-dirs '("PLACEHOLDER")
     ebib-bibtex-dialect 'biblatex
     ebib-notes-storage 'one-file-per-note
     ebib-notes-directory "PLACEHOLDER"
     ebib-reading-list-file "PLACEHOLDER"
     ebib-reading-list-template
     "** %M %T :ReadingList:\n:PROPERTIES:\n:KEY: %K\n:END:\n"
     ebib-autogenerate-keys t)

    :bind
    ("C-c e" . ebib))

  ;;; vertico

  (use-package vertico
    :ensure t
    :pin gnu
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))  ; Enable Vertico at startup

  ;;; orderless

  (use-package orderless
    :after vertico
    :ensure t
    :pin gnu
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))  ;; Correct wrapping of the list

  ;;; marginalia

  (use-package marginalia
    :after vertico
    :ensure t
    :pin gnu
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

	;;; embark

  (use-package embark
    :after vertcio
    :ensure t
    :pin gnu

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :after vertcio
    :ensure t
    :pin gnu)

  ;; Example configuration for Consult
  (use-package consult
    :after vertcio
    :ensure t
    :pin gnu
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
	   ("C-c M-x" . consult-mode-command)
	   ("C-c h" . consult-history)
	   ("C-c k" . consult-kmacro)
	   ("C-c m" . consult-man)
	   ("C-c i" . consult-info)
	   ([remap Info-search] . consult-info)
	   ;; C-x bindings in `ctl-x-map'
	   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	   ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
	   ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	   ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	   ;; Custom M-# bindings for fast register access
	   ("M-#" . consult-register-load)
	   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	   ("C-M-#" . consult-register)
	   ;; Other custom bindings
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   ;; M-g bindings in `goto-map'
	   ("M-g e" . consult-compile-error)
	   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	   ("M-g g" . consult-goto-line)             ;; orig. goto-line
	   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("M-g m" . consult-mark)
	   ("M-g k" . consult-global-mark)
	   ("M-g i" . consult-imenu)
	   ("M-g I" . consult-imenu-multi)
	   ;; M-s bindings in `search-map'
	   ("M-s d" . consult-find)                  ;; Alternative: consult-fd
	   ("M-s c" . consult-locate)
	   ("M-s g" . consult-grep)
	   ("M-s G" . consult-git-grep)
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   ("M-s k" . consult-keep-lines)
	   ("M-s u" . consult-focus-lines)
	   ;; Isearch integration
	   ("M-s e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	   ;; Minibuffer history
	   :map minibuffer-local-map
	   ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	   ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Tweak the register preview for `consult-register-load',
    ;; `consult-register-store' and the built-in commands.  This improves the
    ;; register formatting, adds thin separator lines, register sorting and hides
    ;; the window mode line.
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
    )


#+END_SRC 

This block makes sure the following packages are installed and configured:

*** Ebib

**** What does this package do?

This is an Emacs-based bibliography manager for .bib files written by Joost Kremmers—who has written an extensive accompanying manual. It support both the *BibTeX* and *BibLaTeX* dialects, and is well integrated with *org-mode*.

**** Custom settings

The /setopt/ function sets the following settings:

- preloads /PLACEHOLDER/ as a bibliographic database
- sets the following file associations:
  * .pdf : /Evince/
  * .xopp : /Xournal++/
- sets  /PLACEHOLDER/ as the associated file directory
- sets the dialect to *BibLaTeX*
- sets note storage to /one-file-per-note/
- sets the note directory to /PLACEHOLDER/
- sets the reading list file to /PLACEHOLDER/
- sets a custom reading list template
- enables Ebib's /autogenerate-keys/ function for both *BibTeX* and *BibLaTeX* entries

*** Vertico

**** What does this package do?

*Vertico,* or VERTical Interactive COmpletion, is a completion UI which replaces Emacs' builtin completion framework with a more minimalist design based on Emacs' built-in functions. *Vertico* is highly modular and can be extended with a variety of complementary packages such as *Orderless* and *Marginalia*.

*** Orderless

**** What does this package do?

*Orderless* is a completion style which matches search candidates based on fuzzy search of space-separated components

*** Marginalia

**** What does this package do?

*Marginalia* provides brief marks of annotations at the margin of the minibuffer for completion candidates in order to convey more information about files and functions.

*** Embark

**** What does this package do?

*Embark* has been described as adding a feature rich 'right-click' to Emacs, but this does not capture its power. *Embark* allows for the easy collection and export of candidates to a suitable major mode (e.g. dired), among other features.

**** Custom Settings

For the time being I have used the maintainer's recommendations.

*** Consult

**** What does this package do?

*Consult* adds a rich set of search and navigation commands which allow for easy buffer previews, both inter and intra-file navigation, among many other features. 

**** Custom Settings

For the time being I have used the maintainer's recommendations.


*** Org-modern

**** What does this package do?

*Org-modern* adjusts Org's various elements (heading markers, agenda faces and the tables) in order to make them appear more modern and visually appealing.

**** Custom Settings

For the time being I have used the maintainer's recommendations.

** GNUs

#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-GNUS
    (setq gnus-select-method '(nnnil ""))  ; to disable NNTP and use no server
#+END_SRC

This block simply sets up GNUS to use no server: ideal for RSS. RSS can best be configured and filed within GNUs itself

** General Tweaks

#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-general
  ;;; Startup 
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (which-function-mode 1)

  (setopt frame-title-format "🏺 %b - ScholarMacs %M 🏺")

  ;;; Make background transparent

					  ;(set-frame-parameter nil 'alpha-background 70)

					  ;(add-to-list 'default-frame-alist '(alpha-background . 70))

  ;;; Toggle fullscreen

  (defun toggle-fullscreen ()
    "Toggle full screen and enable/disable battery display mode."
    (interactive)
    (set-frame-parameter
     nil 'fullscreen
     (when (not (frame-parameter nil 'fullscreen)) 'fullboth))) 
  (global-set-key (kbd "C-x <up>") 'toggle-fullscreen)


  ;;; Set up recent file and placeholder functionality

  (recentf-mode 1)
  (setq recentf-max-menu-items 10)  ; Set the maximum number of items to remember
  (global-set-key (kbd "C-x ,") 'recentf-open-files)

  (save-place-mode 1)

  ;;; Line spacing

  (setq-default line-spacing 2)

  ;;; Make scrolling bearable

  (setq pixel-scroll-precision-mode t)

  ;;; Make text nicer to read by adding margins

  (setq-default left-margin-width 5 right-margin-width 5) ; Define new widths.
  (global-visual-line-mode 1)

   ;;; Enable savehist-mode

  (setq history-length 25)
  (savehist-mode 1)

   ;;; Enable global-auto-revert-mode

  (global-auto-revert-mode 1)

   ;;; Disable images in eww

  (setq shr-inhibit-images t)


#+END_SRC



This block does a number of things.

- It disables the:
  * menu-bar
  * tool-bar
  * scroll-bar
- Adds an optional transparent background (commented out for now)
- Sets up a toggleable fullscreen
- Enables /recentf/ mode and binds it to /C-x ,/
- Enables /save-place-mode/
- Sets line spacing to 2
- Enables /pixel-scroll-precision-mode/ for smoother scrolling
- Adds margins
- Enables /savehist-mode/
- Enables /global-auto-revert-mode/
- Disables images in eww (for security purposes)


** Mode-line

*** Mode-line Format


#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-mode-line-format

  (setq-default mode-line-format
		'("%e"


		  (:eval
		   (let ((mode-line-string  ; Define the mode-line-string here
				(concat
				 
				 "💾: "
				 my-mode-line-buffer-name
				 " "
				 my-mode-line-file-position
				 " "
				 my-mode-line-file-delta-status
				 " | "   ; Separator between file position and lambda symbol       
				 my-mode-line-lambda
				 my-mode-line-mode
				 (or (cdr (assoc major-mode my-major-mode-line-mode-indicators)) "")
				 " | "
				 (when which-function-mode
				   (let ((function (which-function)))
				     (if function
					 (concat function)
				       "")))
				 (when (not which-function-mode)
				   "which-function mode is disabled 👎🏻 | ")
				 )))

					 (let* ((window-width (window-width))
				(string-length (length mode-line-string))
				(total-padding (max 0 (- window-width string-length)))
				(left-padding (/ total-padding 2))  ; Integer division of total padding for left side
				(right-padding (- total-padding left-padding)))  ; The rest goes to the right

			   (concat
			    ;; Adjust the left padding slightly if there's an odd difference in padding
			    (make-string left-padding ?\s)
			    mode-line-string
			    (make-string right-padding ?\s)))))))



#+END_SRC

The block defines the mode-line format by calling the variable defined in the subsequent blocks. It then centres the mode-line.

*** Indicators

#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-mode-line-indicators

  (defvar my-mode-line-buffer-name (propertize "%b" 'face 'bold)
    "The format for the buffer name in the mode-line.")

  (defvar my-mode-line-file-position (propertize "(%o)" 'face 'shadow)
    "The format for the file position in the mode-line.")

  (defvar my-mode-line-file-delta-status (propertize "Δ: %&" 'face 'shadow))

  (defvar my-mode-line-lambda (propertize "λ " 'face 'shadow)
    "The format for the lambda symbol in the mode-line.")

  (defvar my-mode-line-mode (propertize "%m" 'face 'bold)
    "The format for the major mode in the mode-line.")

  (defvar my-mode-line-global-string (propertize " %M" 'face 'bold)
    "The format for the glboal status in the mode-line.")

#+END_SRC


This block defines the basic variables to be used as indicators within the mode-line.

*** Major Mode Icons  

#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-mode-line-major-mode-icons

  (defvar my-major-mode-line-mode-indicators
    '((org-mode . " 📚")
      (org-agenda-mode . " 🗓️")
      (bibtex-mode . " 📜")
      (lisp-mode . " 🍯")
      (python-mode . " 🐍")
      (java-mode . " ☕")
      (perl-mode . " 🐫")
      (c-mode . " 👴🏼")
      (c++-mode . " 👴🏼")
      (eww-mode . " 🧭"))

    "A list of mode-specific indicators for the mode line.")

  #+END_SRC


This block defines a list of UTF emojis to be associated with various major mode

** Header line

#+BEGIN_SRC emacs-lisp :name config-header-line

  (defvar header-line-mode nil
    "Non-nil if header-line mode is enabled.")

  (defun header-line-toggle-function ()
    "Toggles the header line."
    (if header-line-mode  ;; Change to `header-line-mode`
	(progn
	  (setq header-line-mode nil)  ;; Change to `header-line-mode`
	  (setq header-line-format nil)
	  (message "Header line format turned off."))
      (progn
	(setq header-line-mode t)  ;; Change to `header-line-mode`
	(setq header-line-format '(:eval "%f"))
	(message "Header line format turned on."))))

  (define-minor-mode toggle-header-line
    "A minor mode to toggle the header line's visibility."
    :lighter " HeaderLine"
    :global t
    (header-line-toggle-function))  ;; Call the correct function name

#+END_SRC

This block adds a header line which displays the current file path. It can be enabled and disabled with 'M-x toggle-header-line'

** Custom Splashscreen

#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-splashscreen

	(defun center-text (text)
	  "Center TEXT within the entire Emacs window width."
	  (let* ((window-width (window-body-width))          ; Get the width of the window
		 (ascii-width (apply 'max (mapcar 'length (split-string text "\n")))))  ; Max length of any line in the ASCII art
	    (if (> window-width ascii-width)
		(let ((padding (max 0 (/ (- window-width ascii-width) 2))))  ; Calculate padding
		  (mapconcat (lambda (line)
			       (concat (make-string padding ?\ ) line))  ; Add padding to each line
			     (split-string text "\n" t)
			     "\n"))
	      text)))  ; If the text is wider than the window, just return it unmodified

	(defun my-ascii-art ()
	  "Insert custom ASCII art into the *scratch* buffer."
	  (interactive)
	  (let ((ascii-art "
    _-`````-,            ,- '- .\n
  .'   .- - |          | - -.  `.\n
 /.'  /                     `.   \n
:/   :      _...   ..._      ``   :\n
::   :     /._ .`:'_.._\\.    ||   :\n
::    `._ ./  ,`  :    \\ . _.''   .\n
`:.      /   |  -.  \\-. \\\\_      /\n
  \:._ _/  .'   .@)  \\@) ` `\\ ,.'\n
     _/,--'       .- .\\,-.`--`.\n
       ,'/''     (( \\ `  )    
        /'/'  \\    `-'  (      
         '/''  `._,-----'\n
          ''/'    .,---'\n
           ''/'      ;:\n
             ''/''  ''/\n
               ''/''/''\n
                 '/'/'\n
                  `;"))
	    (let ((welcome-message "\nWelcome to ScholarMacs! Press any key to clear this scratch buffer. Credit for the art goes to Vijay Kumar Bagavath Singh <3"))
	      (with-current-buffer "*scratch*"
		(erase-buffer)
		(insert (center-text ascii-art))  ; Centered ASCII art
		(insert (center-text welcome-message))  ; Center the welcome message
		(goto-char (point-min))))))

	(add-hook 'emacs-startup-hook 'my-ascii-art)

	;; Automatically clear *scratch* buffer when you start typing
	(defvar my-scratch-cleared nil "Flag to check if *scratch* has been cleared.")

	(defun clear-scratch-buffer-on-input ()
	  "Clear the *scratch* buffer when you start typing."
	  (when (and (eq (current-buffer) (get-buffer "*scratch*"))
		     (not my-scratch-cleared)
		     (not (= (point) (point-min)))) ; Only clear if you are not at the beginning (start typing)
	    (erase-buffer)
	    (setq my-scratch-cleared t)))  ; Flag to prevent multiple clears

	(add-hook 'post-command-hook 'clear-scratch-buffer-on-input)

	;; Keep Emacs looking as usual (do not disable UI elements)
	(setq initial-buffer-choice t)

#+END_SRC 

Here the default scratch buffer is replaced with a splash screen featuring a tasteful ASCII art GNU—credited to Vijay Kumar Bagavath Singh—and a welcome message. Both the art and the message are set to clear upon user input.

** Org-mode

*** Tweaks

#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-org-tweaks


  (require 'org)  ; Ensures org-mode is loaded
  (require 'oc-csl)


  ;;; Org specific files

  (setopt org-agenda-files '("PLACEHOLDER")


  ;;; Org bibliographic and exporter settings

  (setq org-cite-global-bibliography '("PLACEHOLDER")) ; Set your .bib file here

  (setq org-cite-csl-styles-dir "PLACEHOLDER") ; Set the CSL styles directory (path to where your .csl files are located)

  (setq org-cite-csl-style "PLACEHOLDER") ; Set the CSL style to the specific Harvard style you downloaded

  (setq TeX-command-default "LaTeX")
  (setq TeX-clean-confirm nil)  ; Automatically clean without confirmation
  (setq TeX-clean-intermediate-files t)  ; Automatically delete intermediate files


  ;;; Org editing and visual tweaks

  (setq-default org-toggle-pretty-entities t
		modus-themes-org-blocks 'gray-background
		org-support-shift-select t
		org-hide-emphasis-markers t
		org-startup-with-inline-images t
		org-image-actual-width '(300)
		) 
  (setopt org-image-align 'centre)  ; Or 'left or 'right

  ;;; Agenda settings	

  (global-set-key (kbd "C-c a") 'org-agenda) ; 'C-c -' Opens org-agenda
  (global-set-key (kbd "C-c t") (lambda ()           ; 'C-c 0' opens today's agenda
				  (interactive)
				  (org-agenda nil "a")))

  ;;; Activate hl-line mode in Dired and Org Agenda only

  (add-hook 'dired-mode-hook 'hl-line-mode)
  (add-hook 'org-agenda-mode-hook 'hl-line-mode)


  (font-lock-add-keywords 'org-mode
			  '(("^ *\\([-]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))) ; Use only bullet point symbols for lists


  ;;; Spell checking

  (defun my/org-setup-flyspell-and-dictionary ()
    "Enable flyspell and set dictionary to British English in org-mode."
    (flyspell-mode 1)
    (setq ispell-dictionary "british"))

  (add-hook 'org-mode-hook 'my/org-setup-flyspell-and-dictionary)

  ;;; Ensure soft wrapping in org-mode

  (add-hook 'org-mode-hook (lambda () 
			     (auto-fill-mode -1)  ; Disable auto-fill
			     (setq fill-column most-positive-fixnum)  ; Disable hard wrapping
			     (visual-line-mode 1)))  ; Enable soft wrapping

#+END_SRC

**** Org Habit

#+BEGIN_SRC emacs-lisp :name config-agenda-habits

  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)

#+END_SRC
 

*** Capture Templates

#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-capture-templates

  (global-set-key (kbd "C-c 9") 'org-capture) ; 'C-c 0' Opens org-capture

  (setq org-capture-templates
	'(("t" "Todo" entry (file+headline "PLACEHOLDER" "Tasks")
	   "* TODO %?\n  %i\nCreated: %T")))

#+END_SRC

*** Macros

#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-org-macros

  (defun insert-essay-plan-table ()
    "Inserts a 6x2 table for an essay plan with columns 'Idea' and 'Source', including the separator and rows."
    (interactive)
    (insert "| Idea | Source(s) (If applicable) |\n")  ; Insert the header row
    (insert "|------+---------------------------|\n")  ; Insert the separator row
    (dotimes (_ 4)  ; Create 4 additional empty rows (for a total of 6 rows)
      (insert "|      |                        |\n"))
    (org-table-align))  ; Align the table


  (global-set-key (kbd "C-c o e") 'insert-essay-plan-table)


  (defun insert-elisp-config-block()
    "Inserts an Org source block with 'emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-fonts parameters'"
    (interactive)
    (insert "#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-fonts\n#+END_SRC"))

  (defun insert-lisp-block()
    "Inserts an Org source block with 'lisp'"
    (interactive)
    (insert "#+BEGIN_SRC lisp\n#+END_SRC"))


#+END_SRC


**** Macro Table

| Name                      | Function                                                                                                    | Usage   |
|---------------------------+-------------------------------------------------------------------------------------------------------------+---------|
| insert-essay-plan-table   | "Inserts a 6x2 table for an essay plan with columns 'Idea' and 'Source', including the separator and rows." | C-c o e |
| insert-elisp-config-block | "Inserts an Org source block with 'emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-fonts parameters"                  | N/A     |
| insert-lisp-block         | "Inserts an Org source block with 'lisp'"                                                                   | N/A     |
|                           |                                                                                                             |         |


*** Org Babel Settings

#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-org-babel-settings

    (org-babel-do-load-languages
     'org-beabel-load-languages
     '((lisp . t)
       (gnuplot . t)))

#+END_SRC

** Font settings

#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-fonts

  (set-face-attribute 'default nil :family "Dejavu Sans Mono" :height 108 :weight 'normal) ; Main typeface (for regular text)
  (set-face-attribute 'variable-pitch nil :family "Dejavu Sans" :height 1.18 :weight 'normal) ; Proportionately spaced typeface (for non-monospaced text)
  (set-face-attribute 'fixed-pitch nil :family "DejaVu Sans Mono" :height 100 :weight 'normal) ; Monospaced typeface (for fixed-pitch text, like code blocks)
  (set-face-attribute 'fixed-pitch-serif nil :family "DejaVu Sans Mono" :height 100 :weight 'normal)

  (add-hook 'org-mode-hook #'variable-pitch-mode)

#+END_SRC

** Modus Theme tweaks 

#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-modus-settings

  ;;; Simple Modus tweaks

  (setq modus-themes-fringes nil) ; Make fringes transparent
  (bind-key "<f5>" 'modus-themes-toggle) ; Day and Night mode for Emacs
  (setq modus-themes-mode-line '(accented borderless))
  (setopt modus-themes-mixed-fonts t)

  ;;; Headings for Org

  (setq modus-themes-headings
	'((1 . (height 1.4))
	  (2 . (height 1.3))
	  (3. (height 1.2))
	  (4. (height 1.1))
	  (t . (height 1))))

  ;;; Load Modus

  (load-theme 'modus-operandi t)

#+END_SRC


** Dired settings

#+BEGIN_SRC emacs-lisp :tangle ~/ScholarMacs/ScholarMacs :name config-fonts

  ;; Hide file ownership/permissions by default
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)

  ;; Hide dotfiles 
  (setq dired-listing-switches "-l")  ;; Use -l only, excluding -a


#+END_SRC


